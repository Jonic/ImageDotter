// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var ImageDotter, imageDotter;

  ImageDotter = (function() {
    function ImageDotter() {}

    ImageDotter.prototype.init = function() {
      this.destHeight = 600;
      this.destWidth = 1000;
      this.dropzone = document.getElementById('dropzone');
      this.canvas = document.getElementById('canvas');
      this.content = canvas.getContext('2d');
      this.setUpDropzoneDragDropEvents();
      return this;
    };

    ImageDotter.prototype.setUpDropzoneDragDropEvents = function() {
      console.log('setting up dropzone');
      this.dropzone.ondragover = function() {
        console.log('dragged over');
        this.className = 'hover';
        return false;
      };
      this.dropzone.ondragend = function() {
        console.log('dragged off');
        this.className = '';
        return false;
      };
      this.dropzone.ondrop = function(event) {
        var files;
        console.log('DROPITLIKEITISHOT');
        event.preventDefault();
        this.className = '';
        files = event.dataTransfer.files;
        self.sourceImage = files[i];
        self.readUploadedImageData();
        return this;
      };
      return this;
    };

    ImageDotter.prototype.readUploadedImageData = function(file) {
      var reader, self;
      self = this;
      reader = new FileReader();
      reader.onload = function() {
        var image, sourceImage;
        image = new Image();
        sourceImage = image;
        self.renderImage();
        return this;
      };
      reader.readAsDataURL(file);
      return this;
    };

    ImageDotter.prototype.renderImage = function(imageData) {
      var sourceHeight, sourceWidth, sourceX, sourceY;
      sourceX = 0;
      sourceY = 0;
      sourceHeight = this.sourceImage.height;
      sourceWidth = this.sourceImage.width;
      if (sourceWidth > sourceHeight) {
        this.destWidth *= sourceWidth / sourceHeight;
        sourceX = -((destWidth - destHeight) / 2);
      } else {
        this.destHeight *= sourceHeight / sourceWidth;
        sourceY = -((destHeight - destWidth) / 2);
      }
      this.context.drawImage(this.sourceImage, sourceX, sourceY, this.destWidth, this.destHeight);
      return this;
    };

    return ImageDotter;

  })();

  imageDotter = new ImageDotter;

  imageDotter.init();

}).call(this);
